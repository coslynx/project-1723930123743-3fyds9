// This is a schema file for Prisma ORM

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id        String   @id @default(cuid())
  name      String
  email     String   @unique
  password  String
  bio       String?
  avatarUrl String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  goals     Goal[]
  progress  Progress[]
  posts     Post[]
  likes     Like[]
  comments  Comment[]
  friends   Friend[]
  friendOf  Friend[] @relation("FriendOf")
  sentRequests     FriendRequest[] @relation("SentRequests")
  receivedRequests FriendRequest[] @relation("ReceivedRequests")
  notifications    Notification[]
  sessions         Session[]
  achievements     UserAchievement[]
  devices          UserDevice[]
  subscriptions    UserSubscription[]
  invitations      UserInvitation[]
  feedback         UserFeedback[]
  challengeParticipations UserChallengeParticipation[]
  notificationPreferences UserNotificationPreferences?
}

model Goal {
  id          String   @id @default(cuid())
  userId      String
  title       String
  description String?
  targetDate  DateTime
  targetValue Float
  currentValue Float   @default(0)
  unit        String
  category    GoalCategory
  status      GoalStatus @default(Active)
  privacy     GoalPrivacy @default(Private)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  user        User     @relation(fields: [userId], references: [id])
  progress    Progress[]
}

model Progress {
  id        String   @id @default(cuid())
  goalId    String
  userId    String
  value     Float
  date      DateTime
  notes     String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  goal      Goal     @relation(fields: [goalId], references: [id])
  user      User     @relation(fields: [userId], references: [id])
}

model Post {
  id        String   @id @default(cuid())
  content   String
  authorId  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  author    User     @relation(fields: [authorId], references: [id])
  likes     Like[]
  comments  Comment[]
}

model Like {
  id        String   @id @default(cuid())
  userId    String
  postId    String
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])
  post      Post     @relation(fields: [postId], references: [id])

  @@unique([userId, postId])
}

model Comment {
  id        String   @id @default(cuid())
  content   String
  userId    String
  postId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id])
  post      Post     @relation(fields: [postId], references: [id])
}

model Friend {
  id        String   @id @default(cuid())
  userId    String
  friendId  String
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])
  friend    User     @relation("FriendOf", fields: [friendId], references: [id])

  @@unique([userId, friendId])
}

model FriendRequest {
  id         String   @id @default(cuid())
  senderId   String
  receiverId String
  status     FriendRequestStatus
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  sender     User     @relation("SentRequests", fields: [senderId], references: [id])
  receiver   User     @relation("ReceivedRequests", fields: [receiverId], references: [id])

  @@unique([senderId, receiverId])
}

model Notification {
  id        String   @id @default(cuid())
  userId    String
  type      NotificationType
  content   String
  isRead    Boolean  @default(false)
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])
}

model Session {
  id        String   @id @default(cuid())
  userId    String
  token     String   @unique
  expiresAt DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id])
}

model UserAchievement {
  id          String   @id @default(cuid())
  userId      String
  type        String
  name        String
  description String
  unlockedAt  DateTime
  user        User     @relation(fields: [userId], references: [id])
}

model UserDevice {
  id          String   @id @default(cuid())
  userId      String
  deviceType  DeviceType
  deviceToken String
  lastUsed    DateTime
  user        User     @relation(fields: [userId], references: [id])
}

model UserSubscription {
  id        String   @id @default(cuid())
  userId    String
  plan      SubscriptionPlan
  startDate DateTime
  endDate   DateTime?
  status    SubscriptionStatus
  user      User     @relation(fields: [userId], references: [id])
}

model UserInvitation {
  id           String   @id @default(cuid())
  inviterId    String
  inviteeEmail String
  status       InvitationStatus
  createdAt    DateTime @default(now())
  expiresAt    DateTime
  user         User     @relation(fields: [inviterId], references: [id])
}

model UserFeedback {
  id        String   @id @default(cuid())
  userId    String
  content   String
  category  FeedbackCategory
  status    FeedbackStatus
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id])
}

model UserChallengeParticipation {
  id         String   @id @default(cuid())
  userId     String
  challengeId String
  startDate  DateTime
  endDate    DateTime?
  status     ChallengeParticipationStatus
  progress   Float
  user       User     @relation(fields: [userId], references: [id])
}

model UserNotificationPreferences {
  userId                 String  @id
  emailNotifications     Boolean @default(true)
  pushNotifications      Boolean @default(true)
  goalReminders          Boolean @default(true)
  friendActivityUpdates  Boolean @default(true)
  weeklyProgressSummary  Boolean @default(true)
  user                   User    @relation(fields: [userId], references: [id])
}

enum GoalCategory {
  WeightLoss
  MuscleGain
  Endurance
  Flexibility
  Strength
  GeneralFitness
  Nutrition
  MentalHealth
  Custom
}

enum GoalStatus {
  Active
  Completed
  Abandoned
  Paused
}

enum GoalPrivacy {
  Public
  FriendsOnly
  Private
}

enum FriendRequestStatus {
  Pending
  Accepted
  Rejected
}

enum NotificationType {
  FriendRequest
  GoalAchieved
  NewComment
  LikeReceived
  ChallengeInvitation
  WeeklyReport
}

enum DeviceType {
  Mobile
  Tablet
  Desktop
}

enum SubscriptionPlan {
  Free
  Premium
  Pro
}

enum SubscriptionStatus {
  Active
  Cancelled
  Expired
}

enum InvitationStatus {
  Pending
  Accepted
  Expired
}

enum FeedbackCategory {
  Bug
  FeatureRequest
  General
}

enum FeedbackStatus {
  Submitted
  InReview
  Resolved
}

enum ChallengeParticipationStatus {
  Active
  Completed
  Dropped
}